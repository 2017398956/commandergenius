From dece237b88597d34baafbcbf9b7587e87e16a4c4 Mon Sep 17 00:00:00 2001
From: Juanjo <juanjo.ng.83@gmail.com>
Date: Fri, 9 Aug 2013 08:34:39 +0000
Subject: [PATCH 200/249] Add a min sizing for width of command errors, news
 and query windows.

---
 src/error_gui.cpp |  1 +
 src/misc_gui.cpp  |  1 +
 src/news_gui.cpp  |  1 +
 src/widget.cpp    |  3 +++
 src/widget_type.h | 15 ++++++++-------
 5 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/src/error_gui.cpp b/src/error_gui.cpp
index b498cff..ceec8f5 100644
--- a/src/error_gui.cpp
+++ b/src/error_gui.cpp
@@ -183,6 +183,7 @@ public:
 		CopyInDParam(0, this->decode_params, lengthof(this->decode_params));
 		if (this->textref_stack_size > 0) StartTextRefStackUsage(this->textref_stack_size, this->textref_stack);
 
+		size->width = GetMinSizing(NWST_WINDOW_LENGTH, size->width);
 		int text_width = max(0, (int)size->width - WD_FRAMETEXT_LEFT - WD_FRAMETEXT_RIGHT);
 		this->height_summary  = GetStringHeight(this->summary_msg, text_width);
 		this->height_detailed = (this->detailed_msg == INVALID_STRING_ID) ? 0 : GetStringHeight(this->detailed_msg, text_width);
diff --git a/src/misc_gui.cpp b/src/misc_gui.cpp
index 05ab96d..f65dcdd 100644
--- a/src/misc_gui.cpp
+++ b/src/misc_gui.cpp
@@ -1093,6 +1093,7 @@ struct QueryWindow : public Window {
 	{
 		if (widget != WID_Q_TEXT) return;
 
+		size->width = GetMinSizing(NWST_WINDOW_LENGTH, size->width);
 		Dimension d = GetStringMultiLineBoundingBox(this->message, *size);
 		d.width += WD_FRAMETEXT_LEFT + WD_FRAMETEXT_RIGHT;
 		d.height += WD_FRAMERECT_TOP + WD_FRAMERECT_BOTTOM;
diff --git a/src/news_gui.cpp b/src/news_gui.cpp
index 97d4f79..ba4b557 100644
--- a/src/news_gui.cpp
+++ b/src/news_gui.cpp
@@ -315,6 +315,7 @@ struct NewsWindow : Window {
 		StringID str = STR_NULL;
 		switch (widget) {
 			case WID_N_MESSAGE:
+				size->width = GetMinSizing(NWST_WINDOW_LENGTH, size->width);
 				CopyInDParam(0, this->ni->params, lengthof(this->ni->params));
 				str = this->ni->string_id;
 				break;
diff --git a/src/widget.cpp b/src/widget.cpp
index 74b0112..068a945 100644
--- a/src/widget.cpp
+++ b/src/widget.cpp
@@ -2924,6 +2924,9 @@ uint GetMinSizing(NWidSizingType type, uint min_1)
 		case NWST_KEYBOARD:
 			min_sizing = 2 * _settings_client.gui.min_button;
 			break;
+		case NWST_WINDOW_LENGTH:
+			min_sizing = 8 * _settings_client.gui.min_button;
+			break;
 		default: NOT_REACHED();
 	}
 
diff --git a/src/widget_type.h b/src/widget_type.h
index f2e015c..6d95a2c 100644
--- a/src/widget_type.h
+++ b/src/widget_type.h
@@ -42,13 +42,14 @@ enum ArrowWidgetValues {
 
 /** Values for different minimal sizing of widgets. */
 enum NWidSizingType {
-	NWST_NONE,     ///< No sizing type is yet defined.
-				///< Most buttons and scrollbars are initialized with this value.
-				///< Later, they are automatically set to NWST_BUTTON or NWST_STEP.
-	NWST_BUTTON,   ///< Size will be set at least _settings_client.gui.min_button.
-	NWST_STEP,     ///< Size will be set at least _settings_client.gui.min_step (scrollbars and dropdowns).
-	NWST_KEYBOARD, ///< Size for keyboard keys.
-	NWST_OVERRIDE, ///< Avoid widgets to use automatic minimal sizing.
+	NWST_NONE,		///< No sizing type is yet defined.
+					///< Most buttons and scrollbars are initialized with this value.
+					///< Later, they are automatically set to NWST_BUTTON or NWST_STEP.
+	NWST_BUTTON,		///< Size will be set at least _settings_client.gui.min_button.
+	NWST_STEP,		///< Size will be set at least _settings_client.gui.min_step (scrollbars and dropdowns).
+	NWST_KEYBOARD,		///< Size for keyboard keys.
+	NWST_WINDOW_LENGTH,	///< Width for command errors, message windows and statusbar middle part.
+	NWST_OVERRIDE,		///< Avoid widgets to use automatic minimal sizing.
 	NWST_END
 };
 
-- 
1.8.1.2

